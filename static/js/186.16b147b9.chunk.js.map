{"version":3,"file":"static/js/186.16b147b9.chunk.js","mappings":"sPAKe,SAASA,EAAT,GAAmC,IAAZC,EAAW,EAAXA,QACpC,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,gHAESC,EAAAA,EAAAA,IAAWN,GAFpB,gBAETO,EAFS,EAETA,QACRJ,EAAWI,GAHM,gDAKjBC,QAAQC,IAAI,gCAAZ,MALiB,yDAAH,qDASdT,GACFK,GAEH,GAAE,CAACL,KAGF,yBACGE,EAAQQ,OAAS,GAChB,+BACE,wBACGR,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,EADE,SASjB,iEAIP,C,uNCvCDG,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCACHC,EAAY,kCAEZC,EAAY,mCAAG,WAAOC,GAAP,kFACpBC,EADoB,+BACkBJ,EADlB,4DAC6EG,GAD7E,SAEKJ,EAAAA,EAAAA,IAAUK,GAFf,uBAEZC,EAFY,EAElBC,KAFkB,kBAGnBD,GAHmB,2CAAH,sDAMZE,EAAe,mCAAG,WAAOvB,GAAP,kFACvBoB,EADuB,gBACApB,EADA,qBACoBgB,EADpB,4BAECD,EAAAA,EAAAA,IAAUK,GAFX,uBAEfI,EAFe,EAErBF,KAFqB,kBAGtBE,GAHsB,2CAAH,sDAMfC,EAAmB,mCAAG,+FAC3BL,EAD2B,qCACiBJ,GADjB,SAEFD,EAAAA,EAAAA,IAAUK,GAFR,uBAEnBC,EAFmB,EAEzBC,KAFyB,kBAG1BD,GAH0B,2CAAH,qDAMnBK,EAAY,mCAAG,WAAO1B,GAAP,kFACpBoB,EADoB,gBACGpB,EADH,4BAC8BgB,EAD9B,4BAEHD,EAAAA,EAAAA,IAAUK,GAFP,uBAElBE,EAFkB,EAElBA,KAFkB,kBAGnBA,GAHmB,2CAAH,sDAOZhB,EAAU,mCAAG,WAAON,GAAP,kFAClBoB,EADkB,gBACKpB,EADL,4BACgCgB,EADhC,4BAEDD,EAAAA,EAAAA,IAAUK,GAFT,uBAEhBE,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/movies.api.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getReviews } from 'services/movies.api';\n\nexport default function MovieReview({ movieId }) {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const { results } = await getReviews(movieId);\n        setReviews(results);\n      } catch (error) {\n        console.log('Error fetching movie reviews:', error);\n      }\n    };\n\n    if (movieId) {\n      fetchReviews();\n    }\n  }, [movieId]);\n\n  return (\n    <div>\n      {reviews.length > 0 ? (\n        <>\n          <ul>\n            {reviews.map(({ id, author, content }) => (\n              <li key={id}>\n                <h4>{author}</h4>\n                <p>{content}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <p>No reviews available for this movie.</p>\n      )}\n    </div>\n  );\n}\n\nMovieReview.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '81a8869c255f2e2cdd160d2494e708bd';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const searchMovies = async (stringToSearch) => {\n  const queryString = `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${stringToSearch}`;\n  const { data: movies } = await axios.get(queryString);\n  return movies;\n};\n\nexport const getMovieDetails = async (movieId) => {\n  const queryString = `movie/${movieId}$?api_key=${API_KEY}&language=en-US`;\n  const { data: movie } = await axios.get(queryString);\n  return movie;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const queryString = `trending/movie/day?api_key=${API_KEY}`;\n  const { data: movies } = await axios.get(queryString);\n  return movies;\n};\n\nexport const getMovieCast = async (movieId) => {\n  const queryString = `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\n\n\nexport const getReviews = async (movieId) => {\n  const queryString = `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\n\n"],"names":["MovieReview","movieId","useState","reviews","setReviews","useEffect","fetchReviews","getReviews","results","console","log","length","map","id","author","content","axios","API_KEY","IMAGE_URL","searchMovies","stringToSearch","queryString","movies","data","getMovieDetails","movie","fetchTrendingMovies","getMovieCast"],"sourceRoot":""}