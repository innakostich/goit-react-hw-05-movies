{"version":3,"file":"static/js/186.2870656a.chunk.js","mappings":"gNA+CA,UA1CoB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACrB,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,mGAEbL,EAFa,iCAGWM,EAAAA,EAAAA,IAAWN,GAHtB,gBAGPO,EAHO,EAGPA,QACRJ,EAAWI,GAJI,uDAOjBC,QAAQC,IAAI,gCAAZ,MAPiB,yDAAH,qDAWlBJ,GACD,GAAE,CAACL,KAGF,yBACGE,EAAQQ,OAAS,GAChB,+BACE,wBACGR,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,EADE,SASjB,iEAIP,C","sources":["components/Reviews/Reviews.jsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getReviews } from 'services/movies.api';\n\nconst MovieReview = ({ movieId }) => {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        if (movieId) {\n          const { results } = await getReviews(movieId);\n          setReviews(results);\n        }\n      } catch (error) {\n        console.log('Error fetching movie reviews:', error);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {reviews.length > 0 ? (\n        <>\n          <ul>\n            {reviews.map(({ id, author, content }) => (\n              <li key={id}>\n                <h4>{author}</h4>\n                <p>{content}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <p>No reviews available for this movie.</p>\n      )}\n    </div>\n  );\n};\n\nMovieReview.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default MovieReview;\n"],"names":["movieId","useState","reviews","setReviews","useEffect","fetchReviews","getReviews","results","console","log","length","map","id","author","content"],"sourceRoot":""}