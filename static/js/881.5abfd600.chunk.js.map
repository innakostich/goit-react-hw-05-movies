{"version":3,"file":"static/js/881.5abfd600.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx","services/movies.api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchBar\":\"Movies_searchBar__7rhTU\",\"searchForm\":\"Movies_searchForm__J4-xw\",\"searchFormInputContainer\":\"Movies_searchFormInputContainer__xbcbP\",\"searchFormButton\":\"Movies_searchFormButton__C6hnw\",\"searchFormInput\":\"Movies_searchFormInput__9CWXR\",\"link\":\"Movies_link__MzAfU\",\"active\":\"Movies_active__w23gS\"};","\n// import React, { useState, useEffect } from 'react';\n// import { searchMovies } from 'services/movies.api';\n// import { Link, useLocation, useNavigate } from 'react-router-dom';\n// import { FaSearch } from 'react-icons/fa';\n// import Notiflix from 'notiflix';\n// import css from './Movies.module.css';\n\n// const Movies = () => {\n//   const [movieToFind, setMovieToFind] = useState('');\n//   const [movies, setMovies] = useState([]);\n\n//   const location = useLocation();\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const searchString = new URLSearchParams(location.search).get('query');\n\n//     if (searchString) {\n//       const getMovies = async () => {\n//         const { results } = await searchMovies(searchString);\n\n//         setMovies(results);\n//         setMovieToFind(searchString);\n//       };\n\n//       getMovies();\n//     }\n//   }, [location.search]);\n\n//   const handleSubmit = async e => {\n//     e.preventDefault();\n\n//     if (movieToFind.trim()) {\n//       const { results } = await searchMovies(movieToFind);\n\n//       setMovies(results);\n//       setMovieToFind('');\n\n//       if (results.length === 0) {\n//         Notiflix.Notify.warning(\n//           'No movies found! Please change your request and try again'\n//         );\n//       }\n\n//       navigate(`/movies`, { state: { query: movieToFind } });\n//     }\n//   };\n\n//   return (\n//     <>\n//       <header className={css.searchBar}>\n//         <form className={css.searchForm} onSubmit={handleSubmit}>\n//           <div className={css.searchFormInputContainer}>\n//             <input\n//               onChange={e => setMovieToFind(e.target.value)}\n//               className={css.searchFormInput}\n//               type=\"text\"\n//               autoComplete=\"off\"\n//               autoFocus\n//               placeholder=\"Search movie\"\n//               value={movieToFind}\n//             />\n//             <button type=\"submit\" className={css.searchFormButton}>\n//               <FaSearch className={css.searchIcon} />\n//             </button>\n//           </div>\n//         </form>\n//       </header>\n//       {movies.length > 0 && (\n//         <ul>\n//           {movies.map(({ id, title, poster_path }) => (\n//             <li key={id}>\n//               <Link\n//                 to={{\n//                   pathname: `/movies/${id}`,\n//                   state: {\n//                     from: location,\n//                   },\n//                 }}\n//               >\n//                 <img\n//                   src={\n//                     poster_path\n//                       ? `https://image.tmdb.org/t/p/w300${poster_path}`\n//                       : 'https://pomogaetsrazu.ru/images/offers/2829219234.jpg'\n//                   }\n//                   alt={title}\n//                 />\n//                 <p>{title}</p>\n//               </Link>\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n//     </>\n//   );\n// };\n\n// export default Movies;\nimport React, { useState, useEffect } from 'react';\nimport { searchMovies } from 'services/movies.api';\nimport { Link, useLocation, useNavigate, useSearchParams } from 'react-router-dom';\nimport { FaSearch } from 'react-icons/fa';\nimport Notiflix from 'notiflix';\nimport css from './Movies.module.css';\n\nconst Movies = () => {\n  const [movieToFind, setMovieToFind] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const searchString = searchParams.get('query');\n\n    if (searchString) {\n      const getMovies = async () => {\n        const { results } = await searchMovies(searchString);\n\n        setMovies(results);\n        setMovieToFind(searchString);\n      };\n\n      getMovies();\n    }\n  }, [searchParams]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (movieToFind.trim()) {\n      const { results } = await searchMovies(movieToFind);\n\n      setMovies(results);\n      setMovieToFind('');\n\n      if (results.length === 0) {\n        Notiflix.Notify.warning(\n          'No movies found! Please change your request and try again'\n        );\n      }\n\n      searchParams.set('query', movieToFind);\n      navigate(`/movies?${searchParams.toString()}`);\n    }\n  };\n\n  return (\n    <>\n      <header className={css.searchBar}>\n        <form className={css.searchForm} onSubmit={handleSubmit}>\n          <div className={css.searchFormInputContainer}>\n            <input\n              onChange={e => setMovieToFind(e.target.value)}\n              className={css.searchFormInput}\n              type=\"text\"\n              autoComplete=\"off\"\n              autoFocus\n              placeholder=\"Search movie\"\n              value={movieToFind}\n            />\n            <button type=\"submit\" className={css.searchFormButton}>\n              <FaSearch className={css.searchIcon} />\n            </button>\n          </div>\n        </form>\n      </header>\n      {movies.length > 0 && (\n        <ul>\n          {movies.map(({ id, title, poster_path }) => (\n            <li key={id}>\n              <Link\n                to={{\n                  pathname: `/movies/${id}`,\n                  state: {\n                    from: location,\n                  },\n                }}\n              >\n                <img\n                  src={\n                    poster_path\n                      ? `https://image.tmdb.org/t/p/w300${poster_path}`\n                      : 'https://pomogaetsrazu.ru/images/offers/2829219234.jpg'\n                  }\n                  alt={title}\n                />\n                <p>{title}</p>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '81a8869c255f2e2cdd160d2494e708bd';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const searchMovies = async (stringToSearch) => {\n  const queryString = `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${stringToSearch}`;\n  const { data: movies } = await axios.get(queryString);\n  return movies;\n};\n\nexport const getMovieDetails = async (movieId) => {\n  const queryString = `movie/${movieId}$?api_key=${API_KEY}&language=en-US`;\n  const { data: movie } = await axios.get(queryString);\n  return movie;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const queryString = `trending/movie/day?api_key=${API_KEY}`;\n  const { data: movies } = await axios.get(queryString);\n  return movies;\n};\n\nexport const getMovieCast = async (movieId) => {\n  const queryString = `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\n\n\nexport const getReviews = async (movieId) => {\n  const queryString = `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\n\n"],"names":["useState","movieToFind","setMovieToFind","movies","setMovies","location","useLocation","navigate","useNavigate","useSearchParams","searchParams","useEffect","searchString","get","getMovies","searchMovies","results","handleSubmit","e","preventDefault","trim","length","Notiflix","set","toString","className","css","onSubmit","onChange","target","value","type","autoComplete","autoFocus","placeholder","map","id","title","poster_path","to","pathname","state","from","src","alt","axios","API_KEY","IMAGE_URL","stringToSearch","queryString","data","getMovieDetails","movieId","movie","fetchTrendingMovies","getMovieCast","getReviews"],"sourceRoot":""}